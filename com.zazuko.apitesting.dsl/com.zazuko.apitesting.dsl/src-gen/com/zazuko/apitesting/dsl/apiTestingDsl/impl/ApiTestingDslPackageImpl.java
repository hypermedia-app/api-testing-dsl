/**
 * generated by Xtext 2.17.0
 */
package com.zazuko.apitesting.dsl.apiTestingDsl.impl;

import com.zazuko.apitesting.dsl.apiTestingDsl.ApiTestingDslFactory;
import com.zazuko.apitesting.dsl.apiTestingDsl.ApiTestingDslPackage;
import com.zazuko.apitesting.dsl.apiTestingDsl.ClassBlock;
import com.zazuko.apitesting.dsl.apiTestingDsl.ClassLevelAssertion;
import com.zazuko.apitesting.dsl.apiTestingDsl.Element;
import com.zazuko.apitesting.dsl.apiTestingDsl.Model;
import com.zazuko.apitesting.dsl.apiTestingDsl.PropertyAssertion;

import org.eclipse.emf.ecore.EAttribute;
import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.emf.ecore.EReference;

import org.eclipse.emf.ecore.impl.EPackageImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Package</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class ApiTestingDslPackageImpl extends EPackageImpl implements ApiTestingDslPackage
{
  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass modelEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass elementEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass classLevelAssertionEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass classBlockEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass propertyAssertionEClass = null;

  /**
   * Creates an instance of the model <b>Package</b>, registered with
   * {@link org.eclipse.emf.ecore.EPackage.Registry EPackage.Registry} by the package
   * package URI value.
   * <p>Note: the correct way to create the package is via the static
   * factory method {@link #init init()}, which also performs
   * initialization of the package, or returns the registered package,
   * if one already exists.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see org.eclipse.emf.ecore.EPackage.Registry
   * @see com.zazuko.apitesting.dsl.apiTestingDsl.ApiTestingDslPackage#eNS_URI
   * @see #init()
   * @generated
   */
  private ApiTestingDslPackageImpl()
  {
    super(eNS_URI, ApiTestingDslFactory.eINSTANCE);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private static boolean isInited = false;

  /**
   * Creates, registers, and initializes the <b>Package</b> for this model, and for any others upon which it depends.
   *
   * <p>This method is used to initialize {@link ApiTestingDslPackage#eINSTANCE} when that field is accessed.
   * Clients should not invoke it directly. Instead, they should simply access that field to obtain the package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #eNS_URI
   * @see #createPackageContents()
   * @see #initializePackageContents()
   * @generated
   */
  public static ApiTestingDslPackage init()
  {
    if (isInited) return (ApiTestingDslPackage)EPackage.Registry.INSTANCE.getEPackage(ApiTestingDslPackage.eNS_URI);

    // Obtain or create and register package
    Object registeredApiTestingDslPackage = EPackage.Registry.INSTANCE.get(eNS_URI);
    ApiTestingDslPackageImpl theApiTestingDslPackage = registeredApiTestingDslPackage instanceof ApiTestingDslPackageImpl ? (ApiTestingDslPackageImpl)registeredApiTestingDslPackage : new ApiTestingDslPackageImpl();

    isInited = true;

    // Create package meta-data objects
    theApiTestingDslPackage.createPackageContents();

    // Initialize created meta-data
    theApiTestingDslPackage.initializePackageContents();

    // Mark meta-data to indicate it can't be changed
    theApiTestingDslPackage.freeze();

    // Update the registry and return the package
    EPackage.Registry.INSTANCE.put(ApiTestingDslPackage.eNS_URI, theApiTestingDslPackage);
    return theApiTestingDslPackage;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getModel()
  {
    return modelEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getModel_Elements()
  {
    return (EReference)modelEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getElement()
  {
    return elementEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getClassLevelAssertion()
  {
    return classLevelAssertionEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getClassBlock()
  {
    return classBlockEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getClassBlock_Name()
  {
    return (EAttribute)classBlockEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getClassBlock_Assertions()
  {
    return (EReference)classBlockEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getClassBlock_Hatch()
  {
    return (EAttribute)classBlockEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getPropertyAssertion()
  {
    return propertyAssertionEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getPropertyAssertion_Name()
  {
    return (EAttribute)propertyAssertionEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getPropertyAssertion_Assertions()
  {
    return (EReference)propertyAssertionEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getPropertyAssertion_Hatch()
  {
    return (EAttribute)propertyAssertionEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ApiTestingDslFactory getApiTestingDslFactory()
  {
    return (ApiTestingDslFactory)getEFactoryInstance();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private boolean isCreated = false;

  /**
   * Creates the meta-model objects for the package.  This method is
   * guarded to have no affect on any invocation but its first.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void createPackageContents()
  {
    if (isCreated) return;
    isCreated = true;

    // Create classes and their features
    modelEClass = createEClass(MODEL);
    createEReference(modelEClass, MODEL__ELEMENTS);

    elementEClass = createEClass(ELEMENT);

    classLevelAssertionEClass = createEClass(CLASS_LEVEL_ASSERTION);

    classBlockEClass = createEClass(CLASS_BLOCK);
    createEAttribute(classBlockEClass, CLASS_BLOCK__NAME);
    createEReference(classBlockEClass, CLASS_BLOCK__ASSERTIONS);
    createEAttribute(classBlockEClass, CLASS_BLOCK__HATCH);

    propertyAssertionEClass = createEClass(PROPERTY_ASSERTION);
    createEAttribute(propertyAssertionEClass, PROPERTY_ASSERTION__NAME);
    createEReference(propertyAssertionEClass, PROPERTY_ASSERTION__ASSERTIONS);
    createEAttribute(propertyAssertionEClass, PROPERTY_ASSERTION__HATCH);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private boolean isInitialized = false;

  /**
   * Complete the initialization of the package and its meta-model.  This
   * method is guarded to have no affect on any invocation but its first.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void initializePackageContents()
  {
    if (isInitialized) return;
    isInitialized = true;

    // Initialize package
    setName(eNAME);
    setNsPrefix(eNS_PREFIX);
    setNsURI(eNS_URI);

    // Create type parameters

    // Set bounds for type parameters

    // Add supertypes to classes
    classBlockEClass.getESuperTypes().add(this.getElement());
    propertyAssertionEClass.getESuperTypes().add(this.getClassLevelAssertion());

    // Initialize classes and features; add operations and parameters
    initEClass(modelEClass, Model.class, "Model", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getModel_Elements(), this.getElement(), null, "elements", null, 0, -1, Model.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(elementEClass, Element.class, "Element", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(classLevelAssertionEClass, ClassLevelAssertion.class, "ClassLevelAssertion", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(classBlockEClass, ClassBlock.class, "ClassBlock", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getClassBlock_Name(), ecorePackage.getEString(), "name", null, 0, 1, ClassBlock.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getClassBlock_Assertions(), this.getClassLevelAssertion(), null, "assertions", null, 0, -1, ClassBlock.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getClassBlock_Hatch(), ecorePackage.getEString(), "hatch", null, 0, 1, ClassBlock.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(propertyAssertionEClass, PropertyAssertion.class, "PropertyAssertion", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getPropertyAssertion_Name(), ecorePackage.getEString(), "name", null, 0, 1, PropertyAssertion.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getPropertyAssertion_Assertions(), this.getClassLevelAssertion(), null, "assertions", null, 0, -1, PropertyAssertion.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getPropertyAssertion_Hatch(), ecorePackage.getEString(), "hatch", null, 0, 1, PropertyAssertion.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    // Create resource
    createResource(eNS_URI);
  }

} //ApiTestingDslPackageImpl
