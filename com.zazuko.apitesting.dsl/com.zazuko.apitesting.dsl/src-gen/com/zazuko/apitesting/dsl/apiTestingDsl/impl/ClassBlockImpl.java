/**
 * generated by Xtext 2.17.0
 */
package com.zazuko.apitesting.dsl.apiTestingDsl.impl;

import com.zazuko.apitesting.dsl.apiTestingDsl.ApiTestingDslPackage;
import com.zazuko.apitesting.dsl.apiTestingDsl.ClassBlock;
import com.zazuko.apitesting.dsl.apiTestingDsl.ClassLevelAssertion;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Class Block</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link com.zazuko.apitesting.dsl.apiTestingDsl.impl.ClassBlockImpl#getName <em>Name</em>}</li>
 *   <li>{@link com.zazuko.apitesting.dsl.apiTestingDsl.impl.ClassBlockImpl#getAssertions <em>Assertions</em>}</li>
 *   <li>{@link com.zazuko.apitesting.dsl.apiTestingDsl.impl.ClassBlockImpl#getHatch <em>Hatch</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ClassBlockImpl extends ElementImpl implements ClassBlock
{
  /**
   * The default value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected static final String NAME_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected String name = NAME_EDEFAULT;

  /**
   * The cached value of the '{@link #getAssertions() <em>Assertions</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getAssertions()
   * @generated
   * @ordered
   */
  protected EList<ClassLevelAssertion> assertions;

  /**
   * The default value of the '{@link #getHatch() <em>Hatch</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getHatch()
   * @generated
   * @ordered
   */
  protected static final String HATCH_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getHatch() <em>Hatch</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getHatch()
   * @generated
   * @ordered
   */
  protected String hatch = HATCH_EDEFAULT;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ClassBlockImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return ApiTestingDslPackage.Literals.CLASS_BLOCK;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getName()
  {
    return name;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setName(String newName)
  {
    String oldName = name;
    name = newName;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, ApiTestingDslPackage.CLASS_BLOCK__NAME, oldName, name));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<ClassLevelAssertion> getAssertions()
  {
    if (assertions == null)
    {
      assertions = new EObjectContainmentEList<ClassLevelAssertion>(ClassLevelAssertion.class, this, ApiTestingDslPackage.CLASS_BLOCK__ASSERTIONS);
    }
    return assertions;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getHatch()
  {
    return hatch;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setHatch(String newHatch)
  {
    String oldHatch = hatch;
    hatch = newHatch;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, ApiTestingDslPackage.CLASS_BLOCK__HATCH, oldHatch, hatch));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case ApiTestingDslPackage.CLASS_BLOCK__ASSERTIONS:
        return ((InternalEList<?>)getAssertions()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case ApiTestingDslPackage.CLASS_BLOCK__NAME:
        return getName();
      case ApiTestingDslPackage.CLASS_BLOCK__ASSERTIONS:
        return getAssertions();
      case ApiTestingDslPackage.CLASS_BLOCK__HATCH:
        return getHatch();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case ApiTestingDslPackage.CLASS_BLOCK__NAME:
        setName((String)newValue);
        return;
      case ApiTestingDslPackage.CLASS_BLOCK__ASSERTIONS:
        getAssertions().clear();
        getAssertions().addAll((Collection<? extends ClassLevelAssertion>)newValue);
        return;
      case ApiTestingDslPackage.CLASS_BLOCK__HATCH:
        setHatch((String)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case ApiTestingDslPackage.CLASS_BLOCK__NAME:
        setName(NAME_EDEFAULT);
        return;
      case ApiTestingDslPackage.CLASS_BLOCK__ASSERTIONS:
        getAssertions().clear();
        return;
      case ApiTestingDslPackage.CLASS_BLOCK__HATCH:
        setHatch(HATCH_EDEFAULT);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case ApiTestingDslPackage.CLASS_BLOCK__NAME:
        return NAME_EDEFAULT == null ? name != null : !NAME_EDEFAULT.equals(name);
      case ApiTestingDslPackage.CLASS_BLOCK__ASSERTIONS:
        return assertions != null && !assertions.isEmpty();
      case ApiTestingDslPackage.CLASS_BLOCK__HATCH:
        return HATCH_EDEFAULT == null ? hatch != null : !HATCH_EDEFAULT.equals(hatch);
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (name: ");
    result.append(name);
    result.append(", hatch: ");
    result.append(hatch);
    result.append(')');
    return result.toString();
  }

} //ClassBlockImpl
