/*
 * generated by Xtext 2.17.0
 */
grammar InternalApiTestingDsl;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package com.zazuko.apitesting.dsl.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package com.zazuko.apitesting.dsl.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import com.zazuko.apitesting.dsl.services.ApiTestingDslGrammarAccess;

}

@parser::members {

 	private ApiTestingDslGrammarAccess grammarAccess;

    public InternalApiTestingDslParser(TokenStream input, ApiTestingDslGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Model";
   	}

   	@Override
   	protected ApiTestingDslGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getModelRule()); }
	iv_ruleModel=ruleModel
	{ $current=$iv_ruleModel.current; }
	EOF;

// Rule Model
ruleModel returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getModelAccess().getElementsElementParserRuleCall_0());
			}
			lv_elements_0_0=ruleElement
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getModelRule());
				}
				add(
					$current,
					"elements",
					lv_elements_0_0,
					"com.zazuko.apitesting.dsl.ApiTestingDsl.Element");
				afterParserOrEnumRuleCall();
			}
		)
	)*
;

// Entry rule entryRuleElement
entryRuleElement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getElementRule()); }
	iv_ruleElement=ruleElement
	{ $current=$iv_ruleElement.current; }
	EOF;

// Rule Element
ruleElement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	{
		newCompositeNode(grammarAccess.getElementAccess().getClassBlockParserRuleCall());
	}
	this_ClassBlock_0=ruleClassBlock
	{
		$current = $this_ClassBlock_0.current;
		afterParserOrEnumRuleCall();
	}
;

// Entry rule entryRuleClassBlock
entryRuleClassBlock returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getClassBlockRule()); }
	iv_ruleClassBlock=ruleClassBlock
	{ $current=$iv_ruleClassBlock.current; }
	EOF;

// Rule ClassBlock
ruleClassBlock returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='With'
		{
			newLeafNode(otherlv_0, grammarAccess.getClassBlockAccess().getWithKeyword_0());
		}
		otherlv_1='Class'
		{
			newLeafNode(otherlv_1, grammarAccess.getClassBlockAccess().getClassKeyword_1());
		}
		(
			(
				lv_name_2_0=RULE_STRING
				{
					newLeafNode(lv_name_2_0, grammarAccess.getClassBlockAccess().getNameSTRINGTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getClassBlockRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_2_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
		otherlv_3='{'
		{
			newLeafNode(otherlv_3, grammarAccess.getClassBlockAccess().getLeftCurlyBracketKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getClassBlockAccess().getAssertionsClassLevelAssertionParserRuleCall_4_0());
				}
				lv_assertions_4_0=ruleClassLevelAssertion
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getClassBlockRule());
					}
					add(
						$current,
						"assertions",
						lv_assertions_4_0,
						"com.zazuko.apitesting.dsl.ApiTestingDsl.ClassLevelAssertion");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_5='}'
		{
			newLeafNode(otherlv_5, grammarAccess.getClassBlockAccess().getRightCurlyBracketKeyword_5());
		}
	)
;

// Entry rule entryRuleClassLevelAssertion
entryRuleClassLevelAssertion returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getClassLevelAssertionRule()); }
	iv_ruleClassLevelAssertion=ruleClassLevelAssertion
	{ $current=$iv_ruleClassLevelAssertion.current; }
	EOF;

// Rule ClassLevelAssertion
ruleClassLevelAssertion returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	{
		newCompositeNode(grammarAccess.getClassLevelAssertionAccess().getPropertyAssertionParserRuleCall());
	}
	this_PropertyAssertion_0=rulePropertyAssertion
	{
		$current = $this_PropertyAssertion_0.current;
		afterParserOrEnumRuleCall();
	}
;

// Entry rule entryRulePropertyAssertion
entryRulePropertyAssertion returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPropertyAssertionRule()); }
	iv_rulePropertyAssertion=rulePropertyAssertion
	{ $current=$iv_rulePropertyAssertion.current; }
	EOF;

// Rule PropertyAssertion
rulePropertyAssertion returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Expect'
		{
			newLeafNode(otherlv_0, grammarAccess.getPropertyAssertionAccess().getExpectKeyword_0());
		}
		otherlv_1='Property'
		{
			newLeafNode(otherlv_1, grammarAccess.getPropertyAssertionAccess().getPropertyKeyword_1());
		}
		(
			(
				lv_name_2_0=RULE_STRING
				{
					newLeafNode(lv_name_2_0, grammarAccess.getPropertyAssertionAccess().getNameSTRINGTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getPropertyAssertionRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_2_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
