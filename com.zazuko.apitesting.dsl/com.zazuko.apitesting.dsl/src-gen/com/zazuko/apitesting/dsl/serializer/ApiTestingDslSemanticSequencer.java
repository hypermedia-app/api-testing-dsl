/*
 * generated by Xtext 2.17.0
 */
package com.zazuko.apitesting.dsl.serializer;

import com.google.inject.Inject;
import com.zazuko.apitesting.dsl.apiTestingDsl.ApiTestingDslPackage;
import com.zazuko.apitesting.dsl.apiTestingDsl.ClassBlock;
import com.zazuko.apitesting.dsl.apiTestingDsl.Model;
import com.zazuko.apitesting.dsl.services.ApiTestingDslGrammarAccess;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class ApiTestingDslSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private ApiTestingDslGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == ApiTestingDslPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case ApiTestingDslPackage.CLASS_BLOCK:
				sequence_ClassBlock(context, (ClassBlock) semanticObject); 
				return; 
			case ApiTestingDslPackage.MODEL:
				sequence_Model(context, (Model) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Element returns ClassBlock
	 *     ClassBlock returns ClassBlock
	 *
	 * Constraint:
	 *     name=STRING
	 */
	protected void sequence_ClassBlock(ISerializationContext context, ClassBlock semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, ApiTestingDslPackage.Literals.CLASS_BLOCK__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ApiTestingDslPackage.Literals.CLASS_BLOCK__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getClassBlockAccess().getNameSTRINGTerminalRuleCall_2_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Model returns Model
	 *
	 * Constraint:
	 *     elements+=Element+
	 */
	protected void sequence_Model(ISerializationContext context, Model semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
